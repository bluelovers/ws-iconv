"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
exports.SYM_FS_STREAM_DATA = Symbol('FsStreamData');
function open(thisArgv, argv) {
    if (typeof thisArgv.fd !== 'number') {
        let fd;
        try {
            // @ts-ignore
            fd = fs.openSync(thisArgv.path, thisArgv.flags, thisArgv.mode);
        }
        catch (er) {
            _error_emit(thisArgv, er);
            return;
        }
        thisArgv.fd = fd;
    }
    thisArgv.emit('open', thisArgv.fd);
    thisArgv.emit('ready');
}
exports.open = open;
function _error_emit(thisArgv, e) {
    __close(thisArgv);
    thisArgv.emit('error', e);
}
exports._error_emit = _error_emit;
function __close(thisArgv) {
    // @ts-ignore
    if (thisArgv.autoClose) {
        thisArgv.destroy();
    }
}
exports.__close = __close;
function _error_callback(thisArgv, e, callback) {
    __close(thisArgv);
    callback(e);
}
exports._error_callback = _error_callback;
function closeFsStreamSync(stream, cb, err) {
    let er;
    try {
        // @ts-ignore
        fs.closeSync(stream.fd);
    }
    catch (e) {
        er = e || err;
    }
    cb(er);
    // @ts-ignore
    stream.closed = true;
    if (!er) {
        stream.emit('close');
    }
}
exports.closeFsStreamSync = closeFsStreamSync;
function _destroy(thisArgv, error, callback) {
    // @ts-ignore
    const isOpen = typeof thisArgv.fd !== 'number';
    if (isOpen) {
        thisArgv.once('open', closeFsStreamSync.bind(null, thisArgv, callback, error));
        return;
    }
    closeFsStreamSync(thisArgv, callback);
    // @ts-ignore
    thisArgv.fd = null;
}
exports._destroy = _destroy;
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) {
        return;
    }
    if (self._readableState && !self._readableState.emitClose) {
        return;
    }
    self.emit('close');
}
function emitErrorNT(self, err) {
    self.emit('error', err);
}
function getFsStreamData(thisArgv) {
    return thisArgv[exports.SYM_FS_STREAM_DATA] = thisArgv[exports.SYM_FS_STREAM_DATA] || {};
}
exports.getFsStreamData = getFsStreamData;
// @ts-ignore
Object.freeze(exports);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlcm5hbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUEwQjtBQU9iLFFBQUEsa0JBQWtCLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBSXhELFNBQWdCLElBQUksQ0FBQyxRQUF1QixFQUFFLElBQVk7SUFFekQsSUFBSSxPQUFPLFFBQVEsQ0FBQyxFQUFFLEtBQUssUUFBUSxFQUNuQztRQUNDLElBQUksRUFBVSxDQUFBO1FBQ2QsSUFDQTtZQUNDLGFBQWE7WUFDYixFQUFFLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO1NBQzlEO1FBQ0QsT0FBTyxFQUFFLEVBQ1Q7WUFDQyxXQUFXLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBQ3pCLE9BQU87U0FDUDtRQUVELFFBQVEsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0tBQ2pCO0lBRUQsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDeEIsQ0FBQztBQXJCRCxvQkFxQkM7QUFFRCxTQUFnQixXQUFXLENBQWtCLFFBQXVCLEVBQUUsQ0FBSTtJQUV6RSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDakIsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDM0IsQ0FBQztBQUpELGtDQUlDO0FBRUQsU0FBZ0IsT0FBTyxDQUFDLFFBQXVCO0lBRTlDLGFBQWE7SUFDYixJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQ3RCO1FBQ0MsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ25CO0FBQ0YsQ0FBQztBQVBELDBCQU9DO0FBRUQsU0FBZ0IsZUFBZSxDQUFrQixRQUF1QixFQUFFLENBQUksRUFBRSxRQUFrQjtJQUVqRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDakIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2IsQ0FBQztBQUpELDBDQUlDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsTUFBeUUsRUFDMUcsRUFBWSxFQUNaLEdBQUk7SUFHSixJQUFJLEVBQUUsQ0FBQTtJQUNOLElBQ0E7UUFDQyxhQUFhO1FBQ2IsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7S0FDdkI7SUFDRCxPQUFPLENBQUMsRUFDUjtRQUNDLEVBQUUsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDO0tBQ2Q7SUFFRCxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDTixhQUFhO0lBQ2IsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDckIsSUFBSSxDQUFDLEVBQUUsRUFDUDtRQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDckI7QUFDRixDQUFDO0FBdkJELDhDQXVCQztBQUVELFNBQWdCLFFBQVEsQ0FBQyxRQUF1QixFQUFFLEtBQW1CLEVBQUUsUUFBdUM7SUFFN0csYUFBYTtJQUNiLE1BQU0sTUFBTSxHQUFHLE9BQU8sUUFBUSxDQUFDLEVBQUUsS0FBSyxRQUFRLENBQUM7SUFFL0MsSUFBSSxNQUFNLEVBQ1Y7UUFDQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMvRSxPQUFPO0tBQ1A7SUFFRCxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDckMsYUFBYTtJQUNiLFFBQVEsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ3BCLENBQUM7QUFkRCw0QkFjQztBQUVELFNBQVMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLEdBQUc7SUFFckMsV0FBVyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN2QixXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkIsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLElBQUk7SUFFeEIsSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQ3pEO1FBQ0MsT0FBTztLQUNQO0lBQ0QsSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQ3pEO1FBQ0MsT0FBTztLQUNQO0lBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNwQixDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsSUFBSSxFQUFFLEdBQUc7SUFFN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDekIsQ0FBQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxRQUF1QjtJQUV0RCxPQUFPLFFBQVEsQ0FBQywwQkFBa0IsQ0FBQyxHQUFHLFFBQVEsQ0FBQywwQkFBa0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtBQUN6RSxDQUFDO0FBSEQsMENBR0M7QUFFRCxhQUFhO0FBQ2IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5pbXBvcnQgeyBSZWFkU3RyZWFtIH0gZnJvbSAnLi4vcmVhZCc7XG5pbXBvcnQgeyBXcml0ZVN0cmVhbSB9IGZyb20gJy4uL3dyaXRlJztcbmltcG9ydCB7IFN5bmNSZWFkU3RyZWFtIH0gZnJvbSAnLi4vcmVhZC1zeW5jJztcbmltcG9ydCB7IFN5bmNXcml0ZVN0cmVhbSB9IGZyb20gJy4uL3dyaXRlLXN5bmMnO1xuaW1wb3J0IHsgSUZzU3RyZWFtRGF0YSB9IGZyb20gJy4vaW50ZXJmYWNlJztcblxuZXhwb3J0IGNvbnN0IFNZTV9GU19TVFJFQU1fREFUQSA9IFN5bWJvbCgnRnNTdHJlYW1EYXRhJylcblxuZXhwb3J0IHR5cGUgSVRoaXNGc1N0cmVhbSA9IFdyaXRlU3RyZWFtIHwgUmVhZFN0cmVhbSB8IFN5bmNXcml0ZVN0cmVhbSB8IFN5bmNSZWFkU3RyZWFtXG5cbmV4cG9ydCBmdW5jdGlvbiBvcGVuKHRoaXNBcmd2OiBJVGhpc0ZzU3RyZWFtLCBhcmd2PzogYW55W10pXG57XG5cdGlmICh0eXBlb2YgdGhpc0FyZ3YuZmQgIT09ICdudW1iZXInKVxuXHR7XG5cdFx0bGV0IGZkOiBudW1iZXJcblx0XHR0cnlcblx0XHR7XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRmZCA9IGZzLm9wZW5TeW5jKHRoaXNBcmd2LnBhdGgsIHRoaXNBcmd2LmZsYWdzLCB0aGlzQXJndi5tb2RlKVxuXHRcdH1cblx0XHRjYXRjaCAoZXIpXG5cdFx0e1xuXHRcdFx0X2Vycm9yX2VtaXQodGhpc0FyZ3YsIGVyKVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXNBcmd2LmZkID0gZmQ7XG5cdH1cblxuXHR0aGlzQXJndi5lbWl0KCdvcGVuJywgdGhpc0FyZ3YuZmQpO1xuXHR0aGlzQXJndi5lbWl0KCdyZWFkeScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2Vycm9yX2VtaXQ8VCBleHRlbmRzIEVycm9yPih0aGlzQXJndjogSVRoaXNGc1N0cmVhbSwgZTogVCk6IHZvaWRcbntcblx0X19jbG9zZSh0aGlzQXJndilcblx0dGhpc0FyZ3YuZW1pdCgnZXJyb3InLCBlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xvc2UodGhpc0FyZ3Y6IElUaGlzRnNTdHJlYW0pOiB2b2lkXG57XG5cdC8vIEB0cy1pZ25vcmVcblx0aWYgKHRoaXNBcmd2LmF1dG9DbG9zZSlcblx0e1xuXHRcdHRoaXNBcmd2LmRlc3Ryb3koKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX2Vycm9yX2NhbGxiYWNrPFQgZXh0ZW5kcyBFcnJvcj4odGhpc0FyZ3Y6IElUaGlzRnNTdHJlYW0sIGU6IFQsIGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWRcbntcblx0X19jbG9zZSh0aGlzQXJndilcblx0Y2FsbGJhY2soZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZUZzU3RyZWFtU3luYyhzdHJlYW06IGZzLldyaXRlU3RyZWFtIHwgZnMuUmVhZFN0cmVhbSB8IFN5bmNXcml0ZVN0cmVhbSB8IFN5bmNSZWFkU3RyZWFtLFxuXHRjYjogRnVuY3Rpb24sXG5cdGVycj8sXG4pXG57XG5cdGxldCBlclxuXHR0cnlcblx0e1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRmcy5jbG9zZVN5bmMoc3RyZWFtLmZkKVxuXHR9XG5cdGNhdGNoIChlKVxuXHR7XG5cdFx0ZXIgPSBlIHx8IGVycjtcblx0fVxuXG5cdGNiKGVyKVxuXHQvLyBAdHMtaWdub3JlXG5cdHN0cmVhbS5jbG9zZWQgPSB0cnVlO1xuXHRpZiAoIWVyKVxuXHR7XG5cdFx0c3RyZWFtLmVtaXQoJ2Nsb3NlJyk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9kZXN0cm95KHRoaXNBcmd2OiBJVGhpc0ZzU3RyZWFtLCBlcnJvcjogRXJyb3IgfCBudWxsLCBjYWxsYmFjazogKGVycm9yOiBFcnJvciB8IG51bGwpID0+IHZvaWQpOiB2b2lkXG57XG5cdC8vIEB0cy1pZ25vcmVcblx0Y29uc3QgaXNPcGVuID0gdHlwZW9mIHRoaXNBcmd2LmZkICE9PSAnbnVtYmVyJztcblxuXHRpZiAoaXNPcGVuKVxuXHR7XG5cdFx0dGhpc0FyZ3Yub25jZSgnb3BlbicsIGNsb3NlRnNTdHJlYW1TeW5jLmJpbmQobnVsbCwgdGhpc0FyZ3YsIGNhbGxiYWNrLCBlcnJvcikpO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNsb3NlRnNTdHJlYW1TeW5jKHRoaXNBcmd2LCBjYWxsYmFjaylcblx0Ly8gQHRzLWlnbm9yZVxuXHR0aGlzQXJndi5mZCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvckFuZENsb3NlTlQoc2VsZiwgZXJyKVxue1xuXHRlbWl0RXJyb3JOVChzZWxmLCBlcnIpO1xuXHRlbWl0Q2xvc2VOVChzZWxmKTtcbn1cblxuZnVuY3Rpb24gZW1pdENsb3NlTlQoc2VsZilcbntcblx0aWYgKHNlbGYuX3dyaXRhYmxlU3RhdGUgJiYgIXNlbGYuX3dyaXRhYmxlU3RhdGUuZW1pdENsb3NlKVxuXHR7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGlmIChzZWxmLl9yZWFkYWJsZVN0YXRlICYmICFzZWxmLl9yZWFkYWJsZVN0YXRlLmVtaXRDbG9zZSlcblx0e1xuXHRcdHJldHVybjtcblx0fVxuXHRzZWxmLmVtaXQoJ2Nsb3NlJyk7XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYsIGVycilcbntcblx0c2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGc1N0cmVhbURhdGEodGhpc0FyZ3Y6IElUaGlzRnNTdHJlYW0pOiBJRnNTdHJlYW1EYXRhXG57XG5cdHJldHVybiB0aGlzQXJndltTWU1fRlNfU1RSRUFNX0RBVEFdID0gdGhpc0FyZ3ZbU1lNX0ZTX1NUUkVBTV9EQVRBXSB8fCB7fVxufVxuXG4vLyBAdHMtaWdub3JlXG5PYmplY3QuZnJlZXplKGV4cG9ydHMpXG4iXX0=